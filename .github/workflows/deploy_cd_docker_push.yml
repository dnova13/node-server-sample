name: CD Pipeline
# on:
#     push:
#         branches:
#             - master
on:
    workflow_run:
        workflows: ['CI Pipeline']
        types:
            - completed
jobs:
    depoly:
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        runs-on: ubuntu-latest # 테스트할 리눅스,
        steps:
            - name: SSH and deploy
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: 22
                  command_timeout: 20m
                  script: |

                      # 도커 허브 로그인
                      docker login registry-1.docker.io -u ${{ vars.DOCKER_ID }} -p ${{ vars.DOCKER_ACCESS_TOKEN }}

                      mkdir ~/project/${{ vars.PROJECT_NAME }}

                      # Docker Compose로 애플리케이션 빌드 및 실행
                      cd ~/project/${{ vars.PROJECT_NAME }}

                      sudo docker pull ${{ vars.DOCKER_ID }}/${{ vars.PROJECT_NAME }}-backend:latest
                      sudo docker pull ${{ vars.DOCKER_ID }}/${{ vars.PROJECT_NAME }}-webserver:latest
                      sudo docker pull ${{ vars.DOCKER_ID }}/${{ vars.PROJECT_NAME }}-webserver-backup:latest
                      sudo docker pull ${{ vars.DOCKER_ID }}/${{ vars.PROJECT_NAME }}-mariadb:latest

                      # 도커 이미지 조회
                      sudo doeker images  

                      # backend-backup 실행
                      sudo docker run -d \
                        --name backend-backup \
                        --memory=256m \
                        --restart=on-failure \
                        -v $(pwd)/uploads:/app/project/uploads:ro \
                        -v $(pwd)/.env:/app/project/.env:ro \
                        --network=platform-network \
                        ${{ vars.DOCKER_ID }}/${{ vars.PROJECT_NAME }}-backend
                        

                      # 기존 webserver 중단
                      sudo docker rm -f webserver

                      # webserver-backup 실행  
                      sudo docker run -d \
                        --name webserver-backup \
                        --memory=256m \
                        --restart=always \
                        -v $(pwd)/nginx_webserver/default_backup.conf:/etc/nginx/conf.d/default.conf \
                        -p 80:80 \
                        -p 3010:3010 \
                        --network=platform-network \
                        ${{ vars.DOCKER_ID }}/${{ vars.PROJECT_NAME }}-webserver-backup

                       # mariadb 실행
                        sudo docker run -d \
                        --name mariadb \
                        --memory=128m \
                        --restart=unless-stopped \
                        -v $(pwd)/mariadb/maria_data:/var/lib/mysql \
                        -v $(pwd)/mariadb/sqls/:/docker-entrypoint-initdb.d/ \
                        -e MARIADB_DATABASE=${{ vars.DB_NAME }} \
                        -e MARIADB_USER=${{ vars.DB_USER}} \
                        -e MARIADB_ROOT_PASSWORD=${{ vars.DB_PASS}} \
                        -e TZ=${{ vars.TIME_ZONE }} \
                        --expose=3306 \
                        --network=platform-network \
                        ${{ vars.DOCKER_ID }}/${{ vars.PROJECT_NAME }}-mariadb


                      # 실 백엔드 서버 리빌드 
                      echo "--------------------- backend rebuild ---------------------------" 
                      sudo docker rm -f backend
                      sudo docker run -d \
                        --name backend \
                        --memory=256m \
                        --restart=on-failure \
                        -v $(pwd)/uploads:/app/project/uploads \
                        -v $(pwd)/.env:/app/project/.env \
                        --network=platform-network \
                        ${{ vars.DOCKER_ID }}/${{ vars.PROJECT_NAME }}-backend

                      # 백업 컨테이너 중단
                      sudo docker rm -f backend-backup
                      sudo docker rm -f webserver-backup   

                      # 기존 webserver 재실행
                      sudo docker run -d \
                        --name webserver \
                        --memory=256m \
                        --restart=always \
                        -v $(pwd)/nginx_webserver/default.conf:/etc/nginx/conf.d/default.conf \
                        -v $(pwd)/nginx_webserver/logs:/var/log/nginx \
                        -p 80:80 \
                        -p 3010:3010 \
                        --network=platform-network \
                        ${{ vars.DOCKER_ID }}/${{ vars.PROJECT_NAME }}-webserver


                      # 도커 캐시 제거
                      sudo docker system prune -af
