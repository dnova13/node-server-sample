name: CI Pipeline
on:
    push:
        branches:
            - main
jobs:
    build-and-test:
        runs-on: ubuntu-latest # 테스트할 리눅스,
        steps:
            - name: checkout code
              uses: actions/checkout@v4 # 최신 버전의 체크아웃 액션으로, 리포지토리의 코드를 워크플로우 실행 환경

            # - name: code test
            #   run: |
            #       npm install
            #       npm run server-test

            - name: Generate .env file
              run: |
                  #   echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
                    echo "DB_HOST=mariadb" >> .env
                    echo "DB_NAME=${{ vars.DB_NAME }}" >> .env
                    echo "DB_USER=${{ vars.DB_USER }}" >> .env
                    echo "DB_PASS=${{ vars.DB_PASS }}" >> .env
                    echo "DB_PORT=${{ vars.DB_PORT }}" >> .env
                    echo "DB_POOL=${{ vars.DB_POOL }}" >> .env
                    echo "TIME_ZONE=${{ vars.TIME_ZONE }}" >> .env

            # 보안상 생략
            # - name: Use .env in subsequent steps
            #   run: |
            #       cat .env  # .env 파일 내용 확인
            # docker build test 및 서버 코드 test
            - name: docker build and node test
              run: |
                  # docker build
                  docker compose up -d --build

                  # comopse 후 도커 실행환경이 구성되기 위해서 딜레이를 줌.
                  sleep 30

                  # docker node test
                  docker exec backend npm run api-test

            # docker hub registry login 다른 방법
            # - name: Login to Docker Hub
            #   uses: docker/login-action@v3
            #   with:
            #       # registry: registry-1.docker.io
            #       username: ${{ vars.DOCKER_ID }}
            #       password: ${{ vars.DOCKER_ACCESS_TOKEN }}

            - name: docker push
              run: |
                  # 여기서는 도커 허브 레지스트리가 안되므로 registry-1.docker.io 그냥 생략해서 쓰면 도커허브로 연결됨.
                  # docker login registry-1.docker.io -u ${{ vars.DOCKER_ID }} -p ${{ vars.DOCKER_ACCESS_TOKEN }}
                  docker login -u ${{ vars.DOCKER_ID }} -p ${{ vars.DOCKER_ACCESS_TOKEN }}

                  # 해당 레포지토리에서 project 이름 추출
                  REPO_NAME=${{ github.repository }}
                  PROJECT_NAME=${REPO_NAME##*/}
                  echo "The project name is $PROJECT_NAME"

                  docker images

                  docker build -t ${{ vars.DOCKER_ID }}/$PROJECT_NAME-webserver-backup ./nginx_webserver

                  # docker tag
                  docker tag $PROJECT_NAME-backend ${{ vars.DOCKER_ID }}/$PROJECT_NAME-backend:latest
                  docker tag $PROJECT_NAME-webserver ${{ vars.DOCKER_ID }}/$PROJECT_NAME-webserver:latest
                  docker tag $PROJECT_NAME-mariadb ${{ vars.DOCKER_ID }}/$PROJECT_NAME-mariadb:latest

                  # docker push
                  docker push ${{ vars.DOCKER_ID }}/$PROJECT_NAME-backend
                  docker push ${{ vars.DOCKER_ID }}/$PROJECT_NAME-webserver
                  docker push ${{ vars.DOCKER_ID }}/$PROJECT_NAME-webserver-backup
                  docker push ${{ vars.DOCKER_ID }}/$PROJECT_NAME-mariadb
