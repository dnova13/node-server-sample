name: CD Pipeline
on:
    workflow_run:
        workflows: ['CI Pipeline1']
        types:
            - completed
jobs:
    depoly:
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        runs-on: ubuntu-latest # 테스트할 리눅스,
        steps:
            - name: SSH and deploy
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: 22
                  script: |
                      # 임시 폴더 생성
                      TEMP_DIR=$(mktemp -d)

                      # 임시 폴더로 이동
                      cd $TEMP_DIR

                      # 레포지토리 클론 private 시
                      # git clone https://사용자명:${{ secrets.GITHUB_TOKEN }}@github.com/dnova13/node-server-sample
                      git clone https://dnova13:${{ vars.GIT_ACCESS_KEY }}@github.com/dnova13/node-server-sample

                      # 본 프로젝트 디렉토리로 rsync
                      rsync -av --delete node-server-sample/ --exclude='.env' ~/project/node-server-sample
                      # rsync -av --delete node-server-sample ~/project/node-server-sample

                      # 임시 폴더 삭제
                      cd ..
                      rm -rf $TEMP_DIR

                      # Docker Compose로 애플리케이션 빌드 및 실행
                      cd ~/project/node-server-sample

                      # sudo docker compose up -d --build

                      # 무중단 서비스를 위한 백업 도커(ngixn, backend) 실행
                      sudo docker compose -f docker-compose-backup.yml up -d --build backend-backup && \ 
                      sudo docker stop webserver && \ 
                      sudo docker compose -f docker-compose-backup.yml up -d webserver-backup

                      # 도커 테스트 부분(선택적)

                      # db 재실행  
                      sudo docker compose up mariadb -d 

                      # 실 백엔드 서버 리빌드
                      sudo docker compose up backend -d --build

                      # 백업 도커 중단 
                      sudo docker compose -f docker-compose-backup.yml down 

                      # 기존 webserver 재실행
                      sudo docker compose up -d --build webserver

                      # 도커 캐시 제거
                      sudo docker system prune -af
