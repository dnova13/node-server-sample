name: CI/CD Pipeline
on:
    push:
        branches:
            - master
jobs:
    build-and-test:
        runs-on: ubuntu-latest # 테스트할 리눅스,
        steps:
            - name: checkout code
              uses: actions/checkout@v4 # 최신 버전의 체크아웃 액션으로, 리포지토리의 코드를 워크플로우 실행 환경

            # - name: code test
            #   run: |
            #       npm install
            #       npm run server-test

            - name: Generate .env file
              run: |
                  #   echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
                    echo "DB_HOST=localhost" >> .env
                    echo "DB_NAME=${{ vars.DB_NAME }}" >> .env
                    echo "DB_USER=${{ vars.DB_USER }}" >> .env
                    echo "DB_PASS=${{ vars.DB_PASS }}" >> .env
                    echo "DB_PORT=${{ vars.DB_PORT }}" >> .env
                    echo "DB_POOL=${{ vars.DB_POOL }}" >> .env
                    echo "TIME_ZONE=${{ vars.TIME_ZONE }}" >> .env

            - name: Use .env in subsequent steps
              run: |
                  cat .env  # .env 파일 내용 확인

            # - name: docker test
            #   run: |
            #       docker compose up -d --build
            #       docker exec backend npm run server-test
            - name: docker build and node test
              run: |
                  docker build -t mariadb ./mariadb
                  docker run -d \
                    -p 3306:3306 \
                    -v $(pwd)/mariadb/maria_data:/var/lib/mysql \
                    -v $(pwd)/mariadb/sqls/:/docker-entrypoint-initdb.d/ \
                    -e MARIADB_DATABASE=${{vars.DB_NAME}} \
                    -e MARIADB_USER=${{vars.DB_USER}} \
                    -e MARIADB_ROOT_PASSWORD=${{vars.DB_PASS}} \
                    mariadb

                  npm install
                  npm run api-test
    deploy:
        needs: build-and-test
        runs-on: ubuntu-latest
        timeout-minutes: 40
        steps:
            - name: SSH and deploy
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: 22
                  command_timeout: 20m
                  script: |
                      # 임시 폴더 생성
                      TEMP_DIR=$(mktemp -d)

                      # 임시 폴더로 이동
                      cd $TEMP_DIR

                      # 레포지토리 클론 private 시
                      # git clone https://사용자명:${{ secrets.GITHUB_TOKEN }}@github.com/dnova13/node-server-sample
                      git clone https://dnova13:${{ vars.GIT_ACCESS_KEY }}@github.com/dnova13/node-server-sample

                      # 본 프로젝트 디렉토리로 rsync
                      rsync -av --delete node-server-sample/ --exclude='.env' ~/project/node-server-sample
                      # rsync -av --delete node-server-sample ~/project/node-server-sample

                      # 임시 폴더 삭제
                      cd ..
                      rm -rf $TEMP_DIR

                      # Docker Compose로 애플리케이션 빌드 및 실행
                      cd ~/project/node-server-sample

                      # sudo docker compose up -d --build

                      # 무중단 서비스를 위한 백업 도커(ngixn, backend) 실행
                      sudo docker compose -f docker-compose-backup.yml up -d --build backend-backup && \ 
                      sudo docker stop webserver && \ 
                      sudo docker compose -f docker-compose-backup.yml up -d webserver-backup

                      # 도커 테스트 부분(선택적)

                      # 실 백엔드 서버 리빌드
                      sudo docker compose up backend -d --build

                      # 백업 도커 중단 
                      sudo docker compose -f docker-compose-backup.yml down 

                      # 기존 webser 재실행
                      sudo docker compose up -d --build webserver

                      # 도커 캐시 제거
                      sudo docker system prune -af
